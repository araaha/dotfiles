set ratios 1:3:2
set icons true
set previewer ~/.config/lf/preview.sh
set cleaner ~/.config/lf/cleaner.sh
set preview true
set cursorpreviewfmt "\033[7;1m"

set hidden
set ignorecase
set incsearch

set reverse
set findlen 0
set period 1
set noanchorfind

set info size
set sortby ctime

set shellopts '-eu'
set shellflag '-c'

set ifs "\n"

# execute current file (must be executable)
map e $$f
map E !$f

map o :open $fx

cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) nvim $(echo "$fx");;
        image/gif|video/*)
           mpv --auto-window-resize=no $(echo "$fx") > /dev/null 2> /dev/null & disown;;
        image/*)
           nsxiv -g 800x600+560+240 -b -a -sf $(echo "$fx") & disown;;
        application/octet-stream) $EDITOR $fx;;
        application/json) $EDITOR $fx;;
        application/javascript) $EDITOR $fx;;
        application/x-executable) lf -remote "send $id echo Binary";;
        application/x-pie-executable) lf -remote "send $id echo Binary";;
        application/x-object) lf -remote "send $id echo Binary";;
        inode/x-empty) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
    lf -remote 'send unselect'
}}

map <delete> delete

cmd fzf_jump ${{
    res="$(rg --color=never --files --hidden --follow --no-messages --no-ignore | fzf +m --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_jump_abs ${{
    res="$(rg --color=never --files --hidden --follow --no-messages --no-ignore ~/ | fzf +m --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

map f
map fi find
map fd :fzf_jump_abs
map <c-t> :fzf_jump

map c

map n
map n search-next
map N
map N search-prev

map q quit
map zq quit
map / search

map D &garbage put $fx

map m

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

map mk push :mkdir<space>

cmd touch ${{
    touch -- "$*"
    nvim "$*"
}}
map to push :touch<space>

cmd open-with $"$@" $fx

map O push :open-with<space>

cmd find_fzf ${{
    res="$(rg --color=never --files --hidden --follow --no-messages | fzf || true)"
    if [ -n "$res" ]
    then
        nvim "$res"
    fi
}}
map <c-o> :find_fzf

cmd garbage_clear &{{
  garbage empty --all
}}

cmd garbage_restore ${{
  garbage restore
}}

map tc garbage_clear
map tr garbage_restore


cmd decompress &ouch decompress "$fx"
cmd compress &ouch compress "$fx" "$fx"."$@"

map unselect
map <enter>
map <enter> open

map cmd-delete-unix-word
cmap <backspace> cmd-delete-unix-word

cmd chmod ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    chmod $@ "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
  lf -remote "send reload"; lf -remote "send unselect"
}}

map ch push :chmod<space>

cmd copy-path &{{
  echo -n $f | xclip -sel clipboard | lf -remote "send echo $f"
}}

map cp copy-path

map <tab> :toggle; down
map <backtab> :toggle; up

cmap <tab> cmd-menu-complete
cmap <backtab> cmd-menu-complete-back

cmd edir ${{
    printf '%s\n' $fx | edir
    lf -remote "send reload"
}}

map <f-2> :edir
map cl :clear; unselect

map cd :push ''

cmd on-cd &{{
    zoxide add "$PWD"
}}
on-cd

# and fzf integration
cmd fzf_z ${{
    sel="$(zoxide query -l | fzf +m --reverse  +s || true)"
    if [ -d "$sel" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$sel\""
}}

map <a-c> :fzf_z

cmap <up> cmd-history-prev
cmap <down> cmd-history-next

cmd link &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="copy"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
    lf -remote "send reload"
}}

map P :link

map r
map rm delete

map t

cmd pager ${{
    set -f
    case $f in
        *.html) w3m -dump $f | moar;;
        *.wav|*.mp3|*.flac|*.m4a|*.wma|*.ape|*.ac3|*.og[agx]|*.spx|*.opus|*.as[fx]|*.mka)
            exiftool $f | moar;;
        *.zip|*.jar|*.war|*.ear|*.oxt) unzip -l "$1" | moar;;
        *.md) mdcat "$f" | moar;;
        *) bat --paging=always $f;;
    esac
}}

map i
map i :pager

map <c-l> redraw

map gD :cd ~/Downloads
map gS :cd ~/Site
map gl :cd ~/.local/share
map gc :cd ~/.config
map gs :cd ~/Screenshots/
map gd :cd ~/dotfiles/
map gp :cd ~/dotfiles-private/
map gt :cd /tmp/
map gT :cd ~/.local/share/Trash/files/
map gb :cd ~/Books

map <c-c> cmd-escape
map <esc> cmd-escape

cmd ff &{{
    IFS=" "
    ff -- "$*"
    lf -remote "send $id select \"$*\""
}}

map ff push :ff<space>
map sx $nsxiv -g 1200x1000+840+400 -b -a -sf "$fx" & disown

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

map R edit-config

map p :paste
map rr &dragon-drop $fx & disown; lf -remote 'send unselect'
cmd rfv ${{
  RELOAD='reload:rg --column --color=always --smart-case {q} || :'
  OPENER='if [[ $FZF_SELECT_COUNT -eq 0 ]]; then
            nvim {1} +{2}     # No selection. Open the current line in Vim.
          else
            nvim +cw -q {+f}  # Build quickfix list for the selected items.
          fi'
  fzf < /dev/null \
      --disabled --ansi --multi \
      --bind "start:$RELOAD" --bind "change:$RELOAD" \
      --bind "enter:become:$OPENER" \
      --bind "ctrl-o:execute:$OPENER" \
      --bind 'alt-a:select-all,alt-d:deselect-all,ctrl-/:toggle-preview' \
      --delimiter : \
      --height 70% \
      --preview 'bat --paging=always --color=always --highlight-line {2} {1}' \
      --preview-window '~0,+{2}+1/2,<80(up)' \
      --query "$*" || true
}}
map rfv rfv
map zg $lazygit
map su $sudoedit "$f"
